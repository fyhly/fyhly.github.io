<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>MapReduce</title>
    <link href="/2022/08/06/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop/MapReduce/"/>
    <url>/2022/08/06/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop/MapReduce/</url>
    
    <content type="html"><![CDATA[<h1 id="MapReduce简介"><a href="#MapReduce简介" class="headerlink" title="MapReduce简介"></a>MapReduce简介</h1><ul><li>MapReduce提供简单的API，允许用户在不了解底层细节的情况下，开发分布式并行程序，利用大规模集群资源，解决传统单机无法解决的大数据处理问题</li><li>设计思想起源于Google GFS、MapReduce Paper</li><li>Doug Cutting在Yahoo开发，2008年贡献给Apache基金会</li></ul><h2 id="MRv1"><a href="#MRv1" class="headerlink" title="MRv1"></a>MRv1</h2><h3 id="组成"><a href="#组成" class="headerlink" title="组成"></a>组成</h3><ul><li>编程模型</li><li>运行时环境（计算框架）</li></ul><h3 id="设计的目的："><a href="#设计的目的：" class="headerlink" title="设计的目的："></a>设计的目的：</h3><ul><li>主要解决搜索引擎面临的海量数据处理扩展性差的问题</li><li>易于编程，简化分布式程序设计，用户只需专注于自己的应用程序逻辑实现</li></ul><h1 id="MapReduce编程模型"><a href="#MapReduce编程模型" class="headerlink" title="MapReduce编程模型"></a>MapReduce编程模型</h1><ul><li>特殊的数据驱动型</li><li>分为map和reduce两个阶段</li><li>并发只在同一个作业中发生</li><li>不同作业的数据访问不需要协调</li></ul><p><img src="https://fyh-blog-picture.oss-cn-hangzhou.aliyuncs.com/img/image-20220806174126232.png" alt="image-20220806174126232"></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><ul><li>map()函数以key&#x2F;value对作为输入。</li><li>产生另外一系列key&#x2F;value对作为中间输出写入本地磁盘。</li><li>MapReduce框架会自动将这些中间数据按照key值进行聚集，且key值相同的数据被统一交给reduce()函数处理。</li><li>用户可设定聚集策略，默认情况下是对key值进行哈希取模。</li><li>reduce()函数以key及对应的value列表作为输入，经合并key相同的value值后，产生另外一系列key&#x2F;value对作为最终输出写入HDFS。</li></ul><p><img src="https://fyh-blog-picture.oss-cn-hangzhou.aliyuncs.com/img/image-20220806174307170.png" alt="image-20220806174307170"></p><h2 id="数据切分（Split）"><a href="#数据切分（Split）" class="headerlink" title="数据切分（Split）"></a>数据切分（Split）</h2><h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ol><li><p>按照某个策略将数据切分成若干个split，确定Map Task个数</p></li><li><p>给定某个split，能将其解析成一个个key&#x2F;value对。</p></li></ol><h3 id="如何切分（切分算法）"><a href="#如何切分（切分算法）" class="headerlink" title="如何切分（切分算法）"></a>如何切分（切分算法）</h3><p>文件切分算法主要用于确定InputSplit的个数以及每个InputSplit对应的数据段。</p><ul><li>一个大文件会被切分成若干个InputSplit</li><li>对文件的切分是按照“固定”大小进行的，这个大小就是split size</li><li>splitSize&#x3D;max{ minSize, min{ totalSize &#x2F; numSplits, blockSize } }<ul><li>numSplits为用户设定的Map Task个数，默认情况下是1。</li><li>minSize为Split的最小值，由配置参数确定，默认是1。</li><li>blockSize为HDFS中的block大小，默认是64MB。</li></ul></li><li>一旦确定splitSize值后，将文件依次切成大小为splitSize的InputSplit</li><li>最后剩下不足splitSize的数据块单独成为一个InputSplit</li></ul><table><thead><tr><th>minSize</th><th>totalSize</th><th>numSplits</th><th>blockSize</th><th>实际的InputSplite个数</th></tr></thead><tbody><tr><td>1</td><td>250MB</td><td>1</td><td>64MB</td><td>1</td></tr><tr><td>32MB</td><td>250MB</td><td>5</td><td>64MB</td><td>2</td></tr><tr><td>32MB</td><td>250MB</td><td>2</td><td>256MB</td><td>3</td></tr><tr><td>130MB</td><td>1G</td><td>1</td><td>128MB</td><td>1</td></tr></tbody></table><h3 id="Split和Block的区别"><a href="#Split和Block的区别" class="headerlink" title="Split和Block的区别"></a>Split和Block的区别</h3><ul><li>Split是文件在逻辑上的划分，是程序中的一个独立处理单位，每一个split分配给一个task去处理。在实际的存储系统中并没有按split去存储。</li><li>Block是文件在物理上的划分，HDFS系统上就是按照block来存储的。一个block的多个备份存储在不同的节点上。</li><li>一个split可能包含多个block，但一个block不一定只属于一个split。比如：split1完全包含block1，部分包含block2；block2一部分属于split1，一部分属于split2。</li></ul><p><img src="https://fyh-blog-picture.oss-cn-hangzhou.aliyuncs.com/img/image-20220806174517412.png"></p><h2 id="Host选择算法"><a href="#Host选择算法" class="headerlink" title="Host选择算法"></a>Host选择算法</h2><ul><li>InputSplit对象包含四个属性，分别是文件名、起始位置、Split长度和节点列表；构成一个四元组&lt;file, start, length, hosts&gt;。</li><li>节点列表是关键，关系到任务的本地性（locality）。</li><li>Hadoop将数据本地性按照代价划分成三个等级：Node、Rack和Any。</li><li>所谓任务的本地性，即优先让空闲资源处理本节点上的数据，如果节点上没有可处理的数据，则处理同一个机架上的数据，最差情况是处理其他机架上的数据。</li></ul><p><img src="https://fyh-blog-picture.oss-cn-hangzhou.aliyuncs.com/img/image-20220806175401194.png"></p><h2 id="排序（Sort）"><a href="#排序（Sort）" class="headerlink" title="排序（Sort）"></a>排序（Sort）</h2><p>MapReduce的Sort分为两种：</p><ul><li>Map Task中Spill数据的排序<ul><li>数据写入本地磁盘之前，先要对数据进行一次本地排序</li><li>快排算法</li><li>排序先按照分区编号partition进行排序，然后按照key进行排序。经过排序后，数据以分区为单位聚集在一起，且同一分区内所有数据按照key有序</li></ul></li><li>Reduce Task中数据排序<ul><li>Reduce Task对所有数据进行排序</li><li>归并排序算法</li><li>小顶堆</li><li>Sort和Reduce可并行进行</li></ul></li></ul><p><img src="https://fyh-blog-picture.oss-cn-hangzhou.aliyuncs.com/img/image-20220806175534696.png"></p><h1 id="MapReduce计算框架"><a href="#MapReduce计算框架" class="headerlink" title="MapReduce计算框架"></a>MapReduce计算框架</h1><h2 id="MapReduce-1-0"><a href="#MapReduce-1-0" class="headerlink" title="MapReduce 1.0"></a>MapReduce 1.0</h2><h3 id="MapReduce分布式计算框架："><a href="#MapReduce分布式计算框架：" class="headerlink" title="MapReduce分布式计算框架："></a>MapReduce分布式计算框架：</h3><ul><li>JobTracker：<ul><li>负责集群资源监控和作业调度</li><li>通过心跳监控所有TaskTracker的健康状况</li><li>监控Job的运行情况、执行进度、资源使用，交由任务调度器负责资源分配</li><li>任务调度器可插拔：FIFO Scheduler、Capacity Scheduler、FIFO Scheduler</li></ul></li><li>TaskTracker：<ul><li>具体执行Task的单元</li><li>以slot为单位等量划分本节点的资源，分为Map Slot和Reduce Slot</li><li>通过心跳周期性向JobTracker汇报本节点的资源使用情况和任务运行进度</li><li>接收JobTracker的命令执行相应的操作（启动新任务、杀死任务等）</li></ul></li><li>Client：<ul><li>提交用户编写的程序到集群</li><li>查看Job运行状态</li></ul></li></ul><h3 id="MapReduce原理概述"><a href="#MapReduce原理概述" class="headerlink" title="MapReduce原理概述"></a>MapReduce原理概述</h3><p><img src="https://fyh-blog-picture.oss-cn-hangzhou.aliyuncs.com/img/image-20220806180154910.png" alt="原理概述"></p><h3 id="MR-Job生命周期"><a href="#MR-Job生命周期" class="headerlink" title="MR Job生命周期"></a>MR Job生命周期</h3><ol><li><p>作业提交与初始化</p><p>a. 首先JobClient将作业的相关文件上传到HDFS</p><p>b. 然后JobClient通知JobTracker</p><p>c. JobTracker的作业调度模块对作业进行初始化（ JobInProgress和TaskInProgress）</p></li><li><p>任务调度与监控</p><p>a. JobTracker的任务调度器（TaskScheduler）按照一定策略，将task调度到空闲的TaskTracker</p></li><li><p>任务JVM启动</p><p>a. TaskTracker下载任务所需的文件，并为每个Task启动一个独立的JVM</p></li><li><p>任务执行</p><p>a. TaskTracker启动Task，Task通过RPC将其状态汇报给TaskTracker，再由TaskTracker汇报给JobTracker</p></li><li><p>完成作业</p><p>a. 数据写到HDFS</p></li></ol><p><img src="https://fyh-blog-picture.oss-cn-hangzhou.aliyuncs.com/img/image-20220806180511743.png" alt="MapReduce Job生命周期"></p><h3 id="JobTracker概述"><a href="#JobTracker概述" class="headerlink" title="JobTracker概述"></a>JobTracker概述</h3><p>JobTracker主要负责作业控制和资源管理。JobTracker会跟踪任务的执行进度、资源使用量等信息，并将这些信息告诉任务调度器，而调度器会在资源出现空闲时，选择合适的任务使用这些资源。</p><p>JobTracker采用观察者设计模式将新作业通知TaskScheduler</p><p>JobTacker涉及MR生命周期的步骤有：</p><ol><li><p>作业提交到JobTracker</p></li><li><p>任务的调度与监控</p></li></ol><p>其中做的操作包括：</p><p>a. 为作业创建JobInProgress对象</p><p>b. 检查用户是否具有指定队列的作业提交权限</p><p>c. 检查作业配置的内存使用量是否合理</p><p>d. 通知任务调度器按照一定策略调度任务*</p><h4 id="JobTracker核心功能—-作业控制"><a href="#JobTracker核心功能—-作业控制" class="headerlink" title="JobTracker核心功能— 作业控制"></a>JobTracker核心功能— 作业控制</h4><p>JobTracker在其内部以“三层多叉树”的方式描述和跟踪每个作业的运行状态</p><p><img src="https://fyh-blog-picture.oss-cn-hangzhou.aliyuncs.com/img/image-20220806180838139.png"></p><h4 id="JobTracker核心功能—-资源管理"><a href="#JobTracker核心功能—-资源管理" class="headerlink" title="JobTracker核心功能— 资源管理"></a>JobTracker核心功能— 资源管理</h4><p>JobTracker不断接收各个TaskTracker周期性发送过来的资源量和任务状态等信息，为TaskTracker分配最合适的任务。</p><p>Hadoop引入了“slot”概念表示各个节点上的计算资源。为了简化资源管理，Hadoop将各个节点上的资源(CPU、内存和磁盘等)等量切分成若干份，每一份用一个slot表示，同时规定一个Task可根据实际需要占用多个slot。</p><p>三级调度模型：</p><ol><li>选择一个队列</li><li>选择一个作业</li><li>选择一个任务</li></ol><p><img src="https://fyh-blog-picture.oss-cn-hangzhou.aliyuncs.com/img/image-20220806180942382.png"></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>hadoop</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>关注</title>
    <link href="/2022/08/06/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/"/>
    <url>/2022/08/06/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>系统设计</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>分布式锁</title>
    <link href="/2022/08/06/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <url>/2022/08/06/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>分布式锁</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>分布式事务</title>
    <link href="/2022/08/06/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/"/>
    <url>/2022/08/06/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>分布式事务</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>分布式缓存</title>
    <link href="/2022/08/06/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/"/>
    <url>/2022/08/06/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E7%BC%93%E5%AD%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>分布式缓存</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>工厂模式</title>
    <link href="/2022/08/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/08/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>单例模式</title>
    <link href="/2022/08/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <url>/2022/08/06/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>设计模式</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>DFS</title>
    <link href="/2022/08/06/%E7%AE%97%E6%B3%95/DFS/"/>
    <url>/2022/08/06/%E7%AE%97%E6%B3%95/DFS/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BFS</title>
    <link href="/2022/08/06/%E7%AE%97%E6%B3%95/BFS/"/>
    <url>/2022/08/06/%E7%AE%97%E6%B3%95/BFS/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>动态规划</title>
    <link href="/2022/08/06/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <url>/2022/08/06/%E7%AE%97%E6%B3%95/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
      <category>动态规划</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>netty</title>
    <link href="/2022/08/06/%E6%A1%86%E6%9E%B6/netty/"/>
    <url>/2022/08/06/%E6%A1%86%E6%9E%B6/netty/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
      <category>Netty</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>HDFS</title>
    <link href="/2022/08/06/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop/HDFS/"/>
    <url>/2022/08/06/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop/HDFS/</url>
    
    <content type="html"><![CDATA[<h2 id="HDFS简介"><a href="#HDFS简介" class="headerlink" title="HDFS简介"></a>HDFS简介</h2><p>Hadoop 分布式文件系统 (HDFS) 是一种分布式文件系统，旨在在商用硬件上运行。它与现有的分布式文件系统有很多相似之处。但是，与其他分布式文件系统的区别是显著的。HDFS 具有高度容错性，旨在部署在低成本硬件上。HDFS 提供对应用程序数据的高吞吐量访问，适用于拥有大量数据集的应用程序。HDFS 放宽了一些 POSIX 要求，以支持对文件系统数据的流式访问。HDFS 最初是作为 Apache Nutch 网络搜索引擎项目的基础设施而构建的。HDFS 是 Apache Hadoop Core 项目的一部分。项目 URL 是<a href="http://hadoop.apache.org/%E3%80%82">http://hadoop.apache.org/。</a></p><h2 id="HDFS架构"><a href="#HDFS架构" class="headerlink" title="HDFS架构"></a>HDFS架构</h2><p><img src="/images/pasted-1.png" alt="HDFS架构"></p><h2 id="HDFS-1-0"><a href="#HDFS-1-0" class="headerlink" title="HDFS 1.0"></a>HDFS 1.0</h2><p><img src="/images/pasted-3.png" alt="HDFS 1.0架构"></p><h3 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h3><p><img src="/images/pasted-4.png" alt="HDFS 1.0组件"></p><ul><li>NameNode：<ul><li>维护整个文件系统的文件目录树，文件目录的元信息和文件数据块索引</li><li>以FsImage和EditLog形式存储在本地</li><li>整个系统的单点，存在SPOF（Simple Point of Failure）</li></ul></li><li>SecondaryNameNode：<ul><li>又名CheckPoint Node，定期合并FsImage和EditLog</li><li>不接收客户端的请求，作为NameNode的冷备</li></ul></li><li>DataNode：<ul><li>实际存储数据的单元</li><li>以Block为单位</li><li>数据以普通文件形式保存在本地文件系统</li></ul></li><li>Client：<ul><li>与HDFS交互，进行读写、创建目录、创建文件、复制、删除等操作</li><li>HDFS提供了多种客户端：命令行Shell、Java API、Thrift接口、C library、WebHDFS等</li></ul></li></ul><h3 id="NameNode"><a href="#NameNode" class="headerlink" title="NameNode"></a>NameNode</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>集群中单个NameNode的存在极大地简化了系统的架构。NameNode 是所有 HDFS 元数据的仲裁者和存储库。该系统的设计方式是用户数据永远不会流经 NameNode。</p><p>NameNode 维护文件系统命名空间。NameNode 记录对文件系统命名空间或其属性的任何更改。应用程序可以指定应该由 HDFS 维护的文件的副本数。文件的副本数称为该文件的复制因子。此信息由 NameNode 存储。</p><p>NameNode 做出有关块复制的所有决定。它定期从集群中的每个 DataNode 接收 Heartbeat 和 Blockreport。收到心跳意味着 DataNode 运行正常。Blockreport 包含 DataNode 上所有块的列表。</p><h4 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h4><p>HDFS 命名空间由 NameNode 存储。NameNode 使用称为 EditLog 的事务日志来持久记录文件系统元数据发生的每个更改。例如，在 HDFS 中创建一个新文件会导致 NameNode 将一条记录插入到 EditLog 中来表明这一点。同样，更改文件的复制因子会导致将新记录插入到 EditLog 中。NameNode 使用其本地主机操作系统文件系统中的文件来存储 EditLog。整个文件系统命名空间，包括块到文件的映射和文件系统属性，都存储在一个名为 FsImage 的文件中。FsImage 也作为文件存储在 NameNode 的本地文件系统中。</p><p>NameNode 在内存中保存了整个文件系统命名空间和文件 Blockmap 的图像。当 NameNode 启动，或者一个检查点被一个可配置的阈值触发时，它从磁盘读取 FsImage 和 EditLog，将 EditLog 中的所有事务应用到 FsImage 的内存表示中，并将这个新版本刷新到一个磁盘上的新 FsImage。然后它可以截断旧的 EditLog，因为它的事务已应用于持久 FsImage。这个过程称为检查点。检查点的目的是通过获取文件系统元数据的快照并将其保存到 FsImage 来确保 HDFS 具有文件系统元数据的一致视图。尽管读取 FsImage 是高效的，但直接对 FsImage 进行增量编辑并不高效。我们没有为每次编辑修改 FsImage，而是将编辑保存在 Editlog 中。在检查点期间，来自 Editlog 的更改将应用于 FsImage。可以在给定的时间间隔触发检查点（<code>dfs.namenode.checkpoint.period</code>）以秒表示，或者在累积给定数量的文件系统事务之后（<code>dfs.namenode.checkpoint.txns</code>）。如果设置了这两个属性，则要达到的第一个阈值会触发检查点。</p><p>DataNode 将 HDFS 数据存储在其本地文件系统中的文件中。DataNode 不了解 HDFS 文件。它将每个 HDFS 数据块存储在其本地文件系统中的单独文件中。DataNode 不会在同一目录中创建所有文件。相反，它使用启发式方法来确定每个目录的最佳文件数并适当地创建子目录。在同一目录中创建所有本地文件并不是最佳选择，因为本地文件系统可能无法有效地支持单个目录中的大量文件。当 DataNode 启动时，它会扫描其本地文件系统，生成与这些本地文件对应的所有 HDFS 数据块的列表，并将此报告发送给 NameNode。该报告称为<em>Blockreport</em>。</p><h3 id="SecondaryNameNode"><a href="#SecondaryNameNode" class="headerlink" title="SecondaryNameNode"></a>SecondaryNameNode</h3><p>NameNode 将文件系统的修改存储为附加到本机文件系统文件的日志。当 NameNode 启动时，它会从映像文件 FsImage 中读取 HDFS 状态，然后应用EditLog文件中的日志。然后它将新的 HDFS 状态写入 FsImage 并使用空的EditLog开始正常操作。由于 NameNode 仅在启动期间合并 FsImage 和EditLog，因此在繁忙的集群上，EditLog文件可能会随着时间变得非常大。较大的EditLog的另一个副作用是下次重新启动 NameNode 需要更长的时间。</p><p>SecondaryNameNode 定期合并 FsImage 和EditLog，并将EditLog保持在限制范围内。它通常在与主 NameNode 不同的机器上运行，因为它的内存需求与主 NameNode 的顺序相同。</p><p>SecondaryNameNode上检查点进程的启动由两个配置参数控制。</p><ul><li><code>dfs.namenode.checkpoint.period</code>，默认设置为 1 小时，指定两个连续检查点之间的最大延迟，以及</li><li><code>dfs.namenode.checkpoint.txns</code>默认设置为 100 万，定义 NameNode 上的未检查点事务的数量，这将强制执行紧急检查点，即使尚未达到检查点周期。</li></ul><p>SecondaryNameNode 将最新的检查点存储在一个目录中，该目录的结构与主 NameNode 的目录相同。这样检查点的图像总是准备好在必要时被主 NameNode 读取。</p><h3 id="DataNode"><a href="#DataNode" class="headerlink" title="DataNode"></a>DataNode</h3><p>DataNode将每个文件存储为一系列块。复制文件的块以实现容错。</p><p><img src="/images/pasted-5.png" alt="DateNode 存储"></p><h3 id="读写流程"><a href="#读写流程" class="headerlink" title="读写流程"></a>读写流程</h3><p><img src="/images/pasted-6.png" alt="HDFS 读写流程"></p><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><ul><li>NameNode SPOF，NameNode挂掉整个集群不可用</li><li>内存受限，整个集群的size受限于NameNode的内存空间大小</li></ul><h2 id="HDFS-2-0"><a href="#HDFS-2-0" class="headerlink" title="HDFS 2.0"></a>HDFS 2.0</h2><table><thead><tr><th align="left">HDFS 1.0 的问题</th><th>HDFS 2.0 的改进</th></tr></thead><tbody><tr><td align="left">NameNode单点问题</td><td>NameNode HA</td></tr><tr><td align="left">集群受限于NameNode空间</td><td>HDFS Federation</td></tr></tbody></table><h3 id="NameNode-HA"><a href="#NameNode-HA" class="headerlink" title="NameNode HA"></a>NameNode HA</h3><p><img src="/images/pasted-7.png" alt="NameNode HA"></p><ul><li>两个名称节点：<ul><li>Active NameNode</li><li>Standby NameNode</li></ul></li><li>共享存储系统：实现名称节点的状态同步</li><li>ZooKeeper：确保一个名称节点在对外服务</li><li>数据节点：同时向两个名称节点汇报信息</li><li>优点：热备份，提供高可用性</li><li>不足：无法解决可扩展性、系统性能和隔离性</li></ul><h4 id="NameNode-HA-设计思路"><a href="#NameNode-HA-设计思路" class="headerlink" title="NameNode HA 设计思路"></a>NameNode HA 设计思路</h4><ul><li><p>主备一致实现</p><ul><li>如何保持主和备NameNode的状态同步</li></ul></li><li><p>脑裂的解决</p><ul><li><p>脑裂问题就是产生了两个leader，导致集群行为不一致了</p></li><li><p>1）仲裁：当两个节点出现分歧时，由第3方的仲裁者决定听谁的</p></li><li><p>2）fencing：当不能确定某个节点的状态时，通过fencing把对方干掉，确保共享资源被</p><p>完全释放</p></li></ul></li><li><p>透明切换（failover）</p><ul><li><p>NameNode切换对外透明，主Namenode切换到另外一台机器时，不应该导致正在连</p><p>接的客户端失败，主要包括Client、Datanode与NameNode的链接。</p></li></ul></li></ul><h4 id="NameNode-HA-设计实现"><a href="#NameNode-HA-设计实现" class="headerlink" title="NameNode HA 设计实现"></a>NameNode HA 设计实现</h4><h5 id="主备一致实现"><a href="#主备一致实现" class="headerlink" title="主备一致实现"></a>主备一致实现</h5><ul><li>Active NameNode启动后提供服务，并把Editlog写到本地和共享存储中</li><li>Standby NameNode周期性的从共享存储中拉取Editlog，保持与active的状态同步</li><li>DataNode同时两个NameNode发送BlockReport</li></ul><h5 id="脑裂的解决"><a href="#脑裂的解决" class="headerlink" title="脑裂的解决"></a>脑裂的解决</h5><ul><li>QJM的fencing，确保只有一个NN能写成功<ul><li>高可用：QJM全称是Quorum Journal Manager, 由JournalNode（JN）组成，一般是奇数个结点组成。当存活的节点数为偶数个时，无法提供正常服务</li><li>基于Paxos：NameNode会同时向所有JournalNode并行写文件，只要有N&#x2F;2+1个结点写成功则认为此次写操作成功，遵循Paxos协议。</li><li>防止双写：<ul><li>这里面涉及一个很重要的概念Epoch Numbers<ul><li>当NN成为Active结点时，其会被赋予一个Epoch Number</li><li>每个Epoch Number是惟一的，不会有相同的出现</li><li>Epoch Number有严格顺序保证，每次NN切换后其Epoch Number都会自增1</li></ul></li><li>NN把自己的Epoch Number发送给所有JN结点</li><li>NN同步日志到JN的任何RPC请求都必须包含这个Epoch Number</li><li>JN会对比每次请求中的Epoch Number和保存在本地的Epoch Number，小于则拒绝该请求，反之则更新本地保存的Epoch Number</li></ul></li></ul></li><li>DataNode的fencing，确保只有一个NN能命令DN<ul><li>每个NN改变状态的时候，向DN发送自己的状态和一个序列号（类似Epoch Numbers）</li><li>DN在运行过程中维护此序列号，当failover时，新的NN在返回DN心跳时会返回自己的active状态和一个更大的序列号。DN接收到这个返回则认为该NN为新的active</li><li>如果这时原来的active NN恢复，返回给DN的心跳信息包含active状态和原来的序列号，这时DN就会拒绝这个NN的命令</li></ul></li><li>客户端fencing，确保只有一个NN能响应客户端请求<ul><li>让访问Standby NN的客户端直接失败</li><li>在RPC层封装了一层，通过FailoverProxyProvider以重试的方式连接NN</li><li>通过若干次连接一个NN失败后尝试连接新的NN，对客户端的影响是重试的时候增加一定的延迟</li><li>客户端可以设置重试次数和时间</li></ul></li></ul><h5 id="透明切换（failover）"><a href="#透明切换（failover）" class="headerlink" title="透明切换（failover）"></a>透明切换（failover）</h5><p>主备切换的实现：ZKFC</p><p>ZKFC即ZKFailoverController，作为独立进程存在，负责控制NameNode的主备切换，ZKFC会监测NameNode的健康状况，当发现Active NameNode出现异常时会通过ZooKeeper集群进行一次主备选举，完成Active和Standby状态的切换。</p><p>ZKFC实现下述几个功能</p><ol><li>监控NameNode的健康状态。</li><li>向ZK定期发送心跳，使自己可以被选举。</li><li>当自己被ZK选为主时，active ZKFC使相应的NN转换为active。</li></ol><p><img src="https://fyh-blog-picture.oss-cn-hangzhou.aliyuncs.com/image-20220806170828870.png" alt="ZKFC"></p><h3 id="HDFS-Federation"><a href="#HDFS-Federation" class="headerlink" title="HDFS Federation"></a>HDFS Federation</h3><h4 id="HDFS-1-0命名空间架构"><a href="#HDFS-1-0命名空间架构" class="headerlink" title="HDFS 1.0命名空间架构"></a>HDFS 1.0命名空间架构</h4><ul><li>Namespace：由目录、文件和数据块组成，支持常见的文件系统操作，例如创建、删除、修改和列出文件和目录。</li><li>Block Storage Service：这个部分又由两部分组成</li><li>数据块管理（Block Management），这个模块由NameNode提供<ul><li>通过处理DataNode的注册和定期心跳来提供集群中DataNode的基本关系；</li><li>维护数据到数据块的映射关系，以及数据块在DataNode的映射关系；</li><li>支持数据块相关操作，如创建、删除、修改和获取块位置；</li><li>管理副本的放置、副本的创建，以及删除多余的副本。</li></ul></li><li>存储（ Storage） - 是由DataNode提供，主要在本地文件系统存储数据块，并提供读写访问。</li></ul><h4 id="HDFS-Federation设计"><a href="#HDFS-Federation设计" class="headerlink" title="HDFS Federation设计"></a>HDFS Federation设计</h4><ul><li>NameNode共享底层的数据节点存储资源</li><li>DataNode向所有NameNode汇报</li><li>属于同一个Namespace的块构成一个block pool</li><li>可以存在多个相互独立的NameNode</li><li>水平扩展的命名服务</li><li>独立管理Namespace和block pool</li><li>联邦(Federation)关系不需要彼此协调</li><li>向后兼容</li></ul><p><img src="https://fyh-blog-picture.oss-cn-hangzhou.aliyuncs.com/image-20220806171211546.png" alt="Federation"></p><h4 id="HDFS-Federation原理"><a href="#HDFS-Federation原理" class="headerlink" title="HDFS Federation原理"></a>HDFS Federation原理</h4><ul><li>一个Namespace和一个Block Pool对应</li><li>一个Block Pool是属于某个namespace下的一系列block。</li><li>DataNode是共享的，不同Block Pool的block在同一个DataNode上存储。</li><li>一个Namespace和它的block pool一起被叫做Namespace Volume。</li></ul><h4 id="HDFS-Federation的配置"><a href="#HDFS-Federation的配置" class="headerlink" title="HDFS Federation的配置"></a>HDFS Federation的配置</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- core-site.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://nn-host1:rpc-port<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- hdfs-site.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.nameservices<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>ns1,ns2<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.rpc-address.ns1<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>nn-host1:rpc-port<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>dfs.namenode.rpc-address.ns2<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>nn-host2:rpc-port<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="HDFS-Federation存在的问题"><a href="#HDFS-Federation存在的问题" class="headerlink" title="HDFS Federation存在的问题"></a>HDFS Federation存在的问题</h4><ul><li>客户端都要更新配置文件，并维护多个Namespace</li><li>访问目录需要指定完整路径</li><li>当Namespace增多以后，管理和访问非常不方便</li></ul><h4 id="ViewFs（视图文件系统）"><a href="#ViewFs（视图文件系统）" class="headerlink" title="ViewFs（视图文件系统）"></a>ViewFs（视图文件系统）</h4><ul><li>基于Federation的问题社区提出了基于客户端的ViewFs</li><li>ViewFs简单的可以理解为这是一个虚拟的，逻辑上的文件系统</li><li>因为这个文件系统实际并不真实存在，只是我们构建了这个文件系统，它的底层指向了实际意义上的多物理集群</li><li>ViewFs实际上是使用挂载表（Mount Table）做到的</li></ul><h5 id="ViewFs配置"><a href="#ViewFs配置" class="headerlink" title="ViewFs配置"></a>ViewFs配置</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- core-site.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.defaultFS<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>viewfs://Cluster1<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- hdfs-site.xml --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.viewfs.mounttable.Cluster1.link./data<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://nn-host1:rpc-port/data<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.viewfs.mounttable.Cluster1.link./project<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://nn-host2:rpc-port/project<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.viewfs.mounttable.Cluster1.link./user<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://nn-host3:rpc-port/user<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.viewfs.mounttable.Cluster1.link./tmp<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://nn-host4:rpc-port/tmp<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">property</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>fs.viewfs.mounttable.Cluster1.linkFallback<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">value</span>&gt;</span>hdfs://nn-host1:rpc-port/<span class="hljs-tag">&lt;/<span class="hljs-name">value</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">property</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="ViewFS存在的问题"><a href="#ViewFS存在的问题" class="headerlink" title="ViewFS存在的问题"></a>ViewFS存在的问题</h4><ul><li>对于已经发不出去的客户端，升级比较困难；</li><li>对于新增目录，需要添加挂在表与产品对接，维护起来比较困难。</li></ul><h2 id="HDFS-3-0"><a href="#HDFS-3-0" class="headerlink" title="HDFS 3.0"></a>HDFS 3.0</h2><h4 id="RBF"><a href="#RBF" class="headerlink" title="RBF"></a>RBF</h4><p>基于ViewFS的问题，社区在2.9和3.0发布了一个新的解决统一命名空间的方案RBF：Router-Based Federation （HDFS-10467）。该方案是基于服务端实现的，大大简化了升级和管理方面的难度。</p><p>基于路由的Federation方案是在服务端添加了一个Federation layer，这个额外的层允许客户端透明地访问任何子集群。Federation layer将Block访问引导至适当的子群集，维护namespaces的状态。Federation layer包含多个组件。Router是一个与NameNode具有相同接口的组件，根据State Store的元数据信息将客户端请求转发给正确的子集群。StateStore组件包含了远程挂载表（和ViewFS方案里面的配置文件类似，但在客户端之间共享）。</p><p><img src="https://fyh-blog-picture.oss-cn-hangzhou.aliyuncs.com/image-20220806172241623.png" alt="RBF"></p><h5 id="主要组件介绍"><a href="#主要组件介绍" class="headerlink" title="主要组件介绍"></a>主要组件介绍</h5><ul><li><p>Router（无状态）</p><ul><li>一个系统中可以包含多个Router，每个Router包含两个作用：</li></ul><ol><li><p>为客户端提供单个全局的NameNode接口，并将客户端的请求转发到正确子集群中的Active NameNode 上。</p></li><li><p>收集NameNode的心跳信息，报告给State Store，这样State Store维护的信息是实时更新的。</p></li></ol></li><li><p>State Store（ 分布式）</p><ul><li>在State Store里面主要维护以下几方面的信息：<ol><li>子集群的状态，包括块访问负载、可用磁盘空间、HA状态等；</li><li>文件夹&#x2F;文件和子集群之间的映射，即远程挂载表；</li><li>Rebalancer操作的状态；</li><li>Routers的状态。</li></ol></li></ul></li></ul><p><img src="https://fyh-blog-picture.oss-cn-hangzhou.aliyuncs.com/image-20220806172423648.png" alt="image-20220806172423648"></p><h5 id="RBF访问流程"><a href="#RBF访问流程" class="headerlink" title="RBF访问流程"></a>RBF访问流程</h5><ol><li><p>客户端向集群中任意一个Router发出某个文件的读写请求操作；</p></li><li><p>Router从State Store里面的Mount Table查询哪个子集群包含这个文件，并从State Store里面的Membership table里面获取正确的NN；</p></li><li><p>Router获取到正确的NN后，会将客户端的请求转发到NN上，然后也会给客户端一个请求告诉它需要请求哪个子集群；</p></li><li><p>此后，客户端就可以直接访问对应子集群的DN，并进行读写相关的操作。</p></li></ol><p><img src="https://fyh-blog-picture.oss-cn-hangzhou.aliyuncs.com/image-20220806172508269.png" alt="访问流程"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>HDFS的Master&#x2F;Slave架构，使得Master节点在元数据存储与提供服务上都会存在瓶颈。</li><li>为了解决扩展性、性能、隔离等问题，社区提出了Federation方案（HDFS-1052）。</li><li>使用该方案之后，带来的问题就是同一个集群出现了多个命名空间（namespace）。客户需要知道读写的数据在哪个命名空间下才可以进行操作。为了解决统一命名空间的问题，社区提出了基于客户端（client-side）的解决方案ViewFS（HADOOP-7257）。</li><li>ViewFS同样也存在一些问题，例如对于已经发布出去客户端升级比较困难，、对于新增目录需要增加挂载配置，维护起来比较困难。社区在2.9和3.0版本中发布了一个新的解决统一命名空间问题的方案Router-Based Federation（HDFS-10467），该方案是基于服务端进行实现的。</li></ul>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>hadoop</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>jvm内存模型</title>
    <link href="/2022/08/05/jvm/jvm%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/"/>
    <url>/2022/08/05/jvm/jvm%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
      <category>内存模型</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>tidb</title>
    <link href="/2022/08/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/tidb/"/>
    <url>/2022/08/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/tidb/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>TiDB</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>nio</title>
    <link href="/2022/08/05/IO/nio/"/>
    <url>/2022/08/05/IO/nio/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>IO</category>
      
      <category>nio</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>bio</title>
    <link href="/2022/08/05/IO/bio/"/>
    <url>/2022/08/05/IO/bio/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>IO</category>
      
      <category>bio</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>aio</title>
    <link href="/2022/08/05/IO/aio/"/>
    <url>/2022/08/05/IO/aio/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>IO</category>
      
      <category>aio</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>dubbo</title>
    <link href="/2022/08/05/RPC/dubbo/"/>
    <url>/2022/08/05/RPC/dubbo/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>RPC</category>
      
      <category>dubbo</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ClickHouse</title>
    <link href="/2022/08/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/ClickHouse/"/>
    <url>/2022/08/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/ClickHouse/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>ClickHouse</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Mybatis</title>
    <link href="/2022/08/05/%E6%A1%86%E6%9E%B6/Mybatis/"/>
    <url>/2022/08/05/%E6%A1%86%E6%9E%B6/Mybatis/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
      <category>Mybatis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringCloud</title>
    <link href="/2022/08/05/%E6%A1%86%E6%9E%B6/SpringCloud/"/>
    <url>/2022/08/05/%E6%A1%86%E6%9E%B6/SpringCloud/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
      <category>SpringCloud</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SpringBoot</title>
    <link href="/2022/08/05/%E6%A1%86%E6%9E%B6/SpringBoot/"/>
    <url>/2022/08/05/%E6%A1%86%E6%9E%B6/SpringBoot/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
      <category>SpringBoot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring</title>
    <link href="/2022/08/05/%E6%A1%86%E6%9E%B6/Spring/"/>
    <url>/2022/08/05/%E6%A1%86%E6%9E%B6/Spring/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>框架</category>
      
      <category>Spring</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Paxos</title>
    <link href="/2022/08/05/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE/Paxos/"/>
    <url>/2022/08/05/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE/Paxos/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>分布式协议</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>BASE</title>
    <link href="/2022/08/05/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE/BASE/"/>
    <url>/2022/08/05/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE/BASE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>分布式协议</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ACID</title>
    <link href="/2022/08/05/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE/ACID/"/>
    <url>/2022/08/05/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE/ACID/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>分布式协议</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CAP</title>
    <link href="/2022/08/05/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE/CAP/"/>
    <url>/2022/08/05/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE/CAP/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>分布式协议</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>拜占庭将军问题</title>
    <link href="/2022/08/05/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98/"/>
    <url>/2022/08/05/%E5%88%86%E5%B8%83%E5%BC%8F/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>分布式</category>
      
      <category>分布式协议</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>垃圾回收</title>
    <link href="/2022/08/05/jvm/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/"/>
    <url>/2022/08/05/jvm/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
      <category>垃圾回收</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>类加载机制</title>
    <link href="/2022/08/05/jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/"/>
    <url>/2022/08/05/jvm/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>JVM</category>
      
      <category>类加载机制</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ddd</title>
    <link href="/2022/08/05/DDD/ddd/"/>
    <url>/2022/08/05/DDD/ddd/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>DDD</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>mysql</title>
    <link href="/2022/08/05/%E5%AD%98%E5%82%A8/mysql/"/>
    <url>/2022/08/05/%E5%AD%98%E5%82%A8/mysql/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>存储</category>
      
      <category>mysql</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>zk</title>
    <link href="/2022/08/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/zk/"/>
    <url>/2022/08/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/zk/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>zk</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>es</title>
    <link href="/2022/08/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/es/"/>
    <url>/2022/08/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/es/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>es</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>kafka</title>
    <link href="/2022/08/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/"/>
    <url>/2022/08/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/kafka/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>kafka</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>redis</title>
    <link href="/2022/08/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/"/>
    <url>/2022/08/05/%E4%B8%AD%E9%97%B4%E4%BB%B6/redis/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>中间件</category>
      
      <category>redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>flink</title>
    <link href="/2022/08/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/flink/"/>
    <url>/2022/08/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/flink/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>flink</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>spark</title>
    <link href="/2022/08/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/spark/"/>
    <url>/2022/08/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/spark/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>spark</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Hadoop简介</title>
    <link href="/2022/08/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop/Hadoop%E7%AE%80%E4%BB%8B/"/>
    <url>/2022/08/05/%E5%A4%A7%E6%95%B0%E6%8D%AE/hadoop/Hadoop%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="Hadoop简介"><a href="#Hadoop简介" class="headerlink" title="Hadoop简介"></a>Hadoop简介</h2><ul><li>Hadoop是Apache的一个开源的分布式计算平台，核心是以HDFS分布式文件系统和MapReduce分布式计算框架构成，为用户提供了一套底层透明的分布式基础设施</li><li>Hadoop框架中最核心设计就是：HDFS和MapReduce。HDFS提供了海量数据的存储,MapReduce提供了对数据的计算。</li><li>HDFS是Hadoop分布式文件系统，具有高容错性、高伸缩性，允许用户基于廉价硬件部署，构建分布式存储系统，为分布式计算存储提供了底层支持</li><li>MapReduce提供简单的API，允许用户在不了解底层细节的情况下，开发分布式并行程序，利用大规模集群资源，解决传统单机无法解决的大数据处理问题<ul><li>设计思想起源于Google GFS、MapReduce Paper</li></ul></li><li>Doug Cutting在Yahoo开发，2008年贡献给Apache基金会</li></ul><h2 id="Hadoop项目组件"><a href="#Hadoop项目组件" class="headerlink" title="Hadoop项目组件"></a>Hadoop项目组件</h2><p><img src="/images/pasted-0.png" alt="Hadoop项目组件"></p>]]></content>
    
    
    <categories>
      
      <category>大数据</category>
      
      <category>hadoop</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>标签</title>
    <link href="/2022/08/05/%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F/%E6%A0%87%E7%AD%BE/"/>
    <url>/2022/08/05/%E7%94%A8%E6%88%B7%E7%94%BB%E5%83%8F/%E6%A0%87%E7%AD%BE/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    <categories>
      
      <category>用户画像</category>
      
      <category>标签</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
